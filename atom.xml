<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2019yyy.github.io</id>
    <title>yyy&apos;s blog</title>
    <updated>2022-08-01T14:01:00.053Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2019yyy.github.io"/>
    <link rel="self" href="https://2019yyy.github.io/atom.xml"/>
    <subtitle>打不动的分块,戒不掉的珂毒</subtitle>
    <logo>https://2019yyy.github.io/images/avatar.png</logo>
    <icon>https://2019yyy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, yyy&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[「杀人狂前传」题目及题解]]></title>
        <id>https://2019yyy.github.io/post/sha-ren-kuang-qian-chuan-ti-mu-ji-ti-jie/</id>
        <link href="https://2019yyy.github.io/post/sha-ren-kuang-qian-chuan-ti-mu-ji-ti-jie/">
        </link>
        <updated>2022-08-01T12:22:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">「题目描述」</h2>
<blockquote>
<p>如果痛恨所处的黑暗，请你成为你想要的光。<br>
——塞尔维亚的天空</p>
</blockquote>
<p>硅基联邦中有若干个帝国,每个帝国内部都建有铁路,这些铁路链接的两个城市之间的距离都为1,可以使帝国内的城市互相到达,且每两个城市中只有一条路径能够互相到达,ckx决定将这些帝国通过这些距离为1的铁路连在一起,合并成为一个大帝国,联在一起后,同样是每两个城市中只有一条路径能够互相到达</p>
<p>ckx十分贪婪,希望这个帝国中最远的两个城市之间的距离最近.于是身为ckx的女儿zyx,要指挥工人队伍来链接这些帝国</p>
<p>但是zyx遗传了<strong>ckx</strong>的<strong>智商</strong>，并不知道每个帝国中最远的两个城市之间的距离是多少，于是请你来帮忙</p>
<h2 id="输入格式">「输入格式」</h2>
<p>第一行三个整数<em>n</em>,<em>m</em>,<em>k</em>,分别表示所有帝国中的城市数量,原有帝国中的铁路数量,zyx有多少个合并帝国的操作和问题</p>
<p>接下来<em>m</em>行每行两个整数<em>x</em>,<em>y</em>表示x号城市和y号城市之间有铁路</p>
<p>接下来k行每行先输入操作的种类<em>opt</em></p>
<p>当<em>opt</em>=1时,输入一个整数<em>x</em>,输出<em>x</em>所在帝国中最远的两个城市之间的距离是多少</p>
<p>当<em>opt</em>=2时,输入两个整数<em>x</em>,<em>y</em>,将<em>x</em>和<em>y</em>所在的帝国合并</p>
<h2 id="输出格式">「输出格式」</h2>
<p>对于每一个<em>opt</em>=1,输出一个整数作为答案</p>
<h2 id="样例">「样例」</h2>
<h3 id="样例输入">样例输入</h3>
<pre><code>10 5 5
2 6
8 2
4 3
4 7
1 9
1 3 
1 1 
1 1 
1 2 
1 8 
</code></pre>
<h3 id="样例输出">样例输出</h3>
<pre><code>2
1
1
2
2
</code></pre>
<h2 id="数据规模及限制">「数据规模及限制」</h2>
<p>对于40%的数据m≤n≤100,k≤50</p>
<p>对于100%的数据m≤n≤100000,k≤50000</p>
<p>ps:题目翻译成人话就是<a href="https://www.bilibili.com/video/BV1GJ411x7h7?spm_id_from=333.337.search-card.all.click">https://www.luogu.com.cn/paste/yj39adfw</a></p>
<p>by yyy</p>
<h2 id="题解">「题解」</h2>
<p>首先题目翻译成人话是:(<s>这回是真的</s>)</p>
<p>给你一个森林,每一个操作合并其中的两棵树,并查询一个点所在树的直径长度</p>
<p>首先考虑怎么得知一个点所在的树,我们可以用并查集维护</p>
<p>然后问题在于怎么将两条直径合并成一条并要求这条直径最短</p>
<p>于是我们考虑维护每一棵树的直径长度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>数组</p>
<p>我们首先考虑每棵树对合并到一起的直径能做出的最小贡献(注意不算把两棵树链接的那条边</p>
<p>举个例子</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/ck322i4r.png" alt="" loading="lazy"></figure>
<p>我们考虑根是4的这棵树对总体两棵树合并连出的树对直径造成的最小贡献</p>
<p>我们从1开始想,显然,做出的贡献不可能是1,因为如果是1的话,这条直径的另一边显然会对这条直径做出更大贡献,既这种情况:</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.luogu.com.cn/upload/image_hosting/hav9m7md.png" alt="" loading="lazy"></figure>
<p>显然我们让直径对半开,才不会出现另一边做出贡献的情况</p>
<p>对于每一棵树,都可以这样考虑</p>
<p>所以合并两棵树l,r的最小值是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mi>f</mi><mo>[</mo><mi>l</mi><mo>]</mo><mo>⌉</mo><mo>+</mo><mo>⌈</mo><mi>f</mi><mo>[</mo><mi>r</mi><mo>]</mo><mo>⌉</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil f[l] \rceil+\lceil f[r] \rceil+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>于是这道题就愉快的做完了</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
struct Edge{
    int next,to;
} a[15000000];
int head[15000000],cnt;
bool vis[15000000];
void addEdge(int x,int y){
    a[++cnt].next=head[x];
    a[cnt].to=y;
    head[x]=cnt;
}
int fa[1500000],f[1500000];
int getfa(int x){
    if(fa[x]==x){
        return x;
    }
    return fa[x]=getfa(fa[x]);
}
void merge(int x,int y){
    int fax=getfa(x);
    int fay=getfa(y);
    fa[fax]=fay;
}
int ans,final;
void getdiametre(int x,int h){
	vis[x]=true;
	for(int i=head[x];i;i=a[i].next){
		if(!vis[a[i].to]){
			if(h+1&gt;ans){
				ans=h+1;
				final=a[i].to;
			}
			getdiametre(a[i].to,h+1);
		}
	}
	vis[x]=false;
	return;	
}

int main(){
    int n,m,k;
    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;
    for(int i=1;i&lt;=n;i++){
        fa[i]=i;
    }
    for(int i=1;i&lt;=m;i++){
        int x,y;
        cin&gt;&gt;x&gt;&gt;y;
        addEdge(x,y);
        addEdge(y,x);
        merge(x,y);
    }
    for(int i=1;i&lt;=n;i++){
        ans=0;
        final=i;
        if(fa[i]==i){
            getdiametre(i,0);
            getdiametre(final,0);
            f[i]=ans;
        }
    }
    for(int i=1;i&lt;=k;i++){
        int opt,x,y;
        cin&gt;&gt;opt&gt;&gt;x;
        if(opt==2){
            cin&gt;&gt;y;
            x=getfa(x);
            y=getfa(y);
            if(x==y){
                continue;
            }
            f[y]=max((int)((f[x]+1)/2+(f[y]+1)/2+1),max(f[x],f[y]));
            f[x]=0;
            merge(x,y);
        }else{
            cout&lt;&lt;f[getfa(x)]&lt;&lt;endl;
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022年多校冲刺NOIP联训测试3「翻转颜色」]]></title>
        <id>https://2019yyy.github.io/post/reverse-color/</id>
        <link href="https://2019yyy.github.io/post/reverse-color/">
        </link>
        <updated>2022-08-01T10:42:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">「题目描述」</h2>
<p>给定一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span> 个格子的染色情况。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  (1 ≤ i ≤ 2n)</p>
<p>为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 时表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个格子为黑色；否则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>，表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个格子为白色。</p>
<p>你需要进行恰好 n 次操作，使得所有格子的颜色都变为白色。第 i 次操作时，你可以选择两个未在之前操作中选择过的格子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">li</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">ri</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">li</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span></span></span></span> &lt; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">ri</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span></span></span></span>），并翻转所有下标在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mi>i</mi><mo separator="true">,</mo><mi>r</mi><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[li
,ri]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 中的格子的颜色。所有操作结束后，每个格子应恰好被选择一次。</p>
<p>请求出合法操作序列的方案数对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>e</mi><mn>9</mn><mo>+</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">1e9 + 7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span> 取模的结果。我们认为两个操作序列不同，当且仅当存在某个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>∈</mo><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">i ∈ [1, n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> 使得两个操作序列对应的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不同或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不同。</p>
<h2 id="输入格式">「输入格式」</h2>
<p>从标准输入读入数据。</p>
<p>本题有多组数据。</p>
<p>输入的第一行包含一个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，表示数据组数。</p>
<p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>T</mi></mrow><annotation encoding="application/x-tex">2T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 行，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>2</mn><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(2i − 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 行和第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">2i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span></span></span></span> 行表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 组数据。其中，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>2</mn><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(2i − 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 行包含<br>
一个正整数，表示这组数据中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>；第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">2i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span></span></span></span> 行包含一个仅由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span> 构成的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span> 的<br>
字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>，含义如题面所示。</p>
<h2 id="输出格式">「输出格式」</h2>
<p>输出到标准输出。</p>
<p>输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 行，其中第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 行包含一个整数，表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 组数据的答案。</p>
<h2 id="题解">「题解」</h2>
<p>考虑每一个点想要如何变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>,只有当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>点经过奇数次修改,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>点经过偶数次修改后才可以实现</p>
<p>同时注意到每一个点仅被选择一次,最后结果的实现只和点是一个修改区间的左端点右端点有关系</p>
<p>我们又注意到一个性质,在一个点后面的点无论是左还是右都不会影响到这个点</p>
<p>因此我们可以通过点被修改的奇偶性递推</p>
<p>第一个点肯定是一个左端点,当一个点是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span> ,如果前面有奇数次修改覆盖它,那么我们就需要把这个点的修改次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span>,也就是把这个点变成左端点,如果前面是偶数次,我们将这个点变成右端点,使这个点的被修改次数不变</p>
<p>当这个点使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>就反过来</p>
<p>注意判断0的情况,当最左或最右是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>时肯定是0,最后左右的数量无法相等的是0,中间有右端点数量大于左端点数量的也是0</p>
<p>每一个右端点都可以和前面任意一个未匹配过的左端点匹配,所以每次来一个右端点都要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mo>(</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>∗</mo><mo>(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">ans=(ans*(r-l))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p>
<p>注意每个区间的翻转顺序不同也是不同的方案。所以答案还要乘上$ n!$。</p>
<p>于是就成功完成了这道题</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n;
const long long mod=1e9+7;
int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin&gt;&gt;T;
	while(T--){
        long long ans=1;
        long long l=0,r=1;
		cin&gt;&gt;n;
		string s;
		cin&gt;&gt;s;
        if(s[0]=='W'||s[n*2-1]=='W'){
            cout&lt;&lt;0&lt;&lt;endl;
            continue;
        }
		for(int i=1;i&lt;s.length();i++){
			if(s[i]=='W'){
                if((r-l)&amp;1){
                    r++;
                }else{
                    ans=(ans*max((long long)1,r-l))%mod;
                    l++;
                }
			}else{
                if((r-l)&amp;1){
                    ans=(ans*max((long long)1,r-l))%mod;
                    l++;
                }else{
                    r++;
                }
			}
            if(l&gt;r){
                ans=0;
                continue;
            }
		}
        if(r!=l){
            cout&lt;&lt;0&lt;&lt;endl;
            continue;
        }
    //    cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;
        for(int i=2;i&lt;=n;i++){
            ans=(ans*i)%mod;
        }
        cout&lt;&lt;ans&lt;&lt;endl;
	}
	
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>